[package]
name = "knx-rs"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"
authors = ["Cristiano Chieppa"]
description = "KNXnet/IP protocol implementation for embedded systems"
repository = "https://github.com/cc90202/knx-rs"
homepage = "https://github.com/cc90202/knx-rs"
readme = "README.md"
keywords = ["knx", "knxnet-ip", "embedded", "no-std", "home-automation"]
categories = ["embedded", "no-std", "network-programming"]
exclude = [
    "src/main.rs",
    "src/knx_client.rs",
    "src/knx_discovery.rs",
    "src/configuration.rs",
    "src/configuration.rs.example",
    "examples/",
    "build.rs",
    "memory.x",
    "knx_simulator.py",
    "test_runner.py",
    "check-all.sh",
    ".github/",
    ".claude/",
]

[lib]
name = "knx_rs"
path = "src/lib.rs"

[dependencies]
# Core library dependencies (no_std)
heapless = { version = "0.9.1", default-features = false }

# Optional dependencies for defmt logging
defmt = { version = "1.0.1", optional = true }

# Embassy dependencies (only for binary/examples)
embassy-sync = { version = "0.7.2", features = ["defmt"], optional = true }
embassy-executor = { version = "0.9.0", features = ["arch-cortex-m", "executor-thread", "executor-interrupt", "defmt"], optional = true }
embassy-time = { version = "0.5.0", features = ["defmt", "defmt-timestamp-uptime"], optional = true }
embassy-futures = { version = "0.1.1", optional = true }
embassy-rp = { version = "0.8.0", features = ["defmt", "unstable-pac", "time-driver", "critical-section-impl", "rp235xa", "binary-info"], optional = true }
embassy-net = { version = "0.7.1", features = ["defmt", "icmp", "tcp", "udp", "raw", "dhcpv4", "medium-ethernet", "dns"], optional = true }
embassy-usb-logger = { version = "0.5.1", optional = true }

# Hardware specific (only for RP2040 binary)
cyw43 = { version = "0.5.0", features = ["defmt", "firmware-logs"], optional = true }
cyw43-pio = { version = "0.8.0", features = ["defmt"], optional = true }
panic-persist = { version = "0.3.0", features = ["utf8"], optional = true }
defmt-rtt = { version = "1.0.0", optional = true }
cortex-m-rt = { version = "0.7.0", optional = true }
static_cell = { version = "2.1", optional = true }
log = { version = "0.4", optional = true }
critical-section = { version = "1.2.0", optional = true }

# Serialization support (optional)
serde = { version = "1.0.206", default-features = false, features = ["derive"], optional = true }

[features]
default = []

# Enable std support (for examples and applications)
std = []

# Enable defmt logging support
defmt = ["dep:defmt", "heapless/defmt"]

# Enable serde support
serde = ["dep:serde", "heapless/serde"]

# USB logger feature (alternative to defmt-rtt)
usb-logger = ["dep:embassy-usb-logger", "dep:log"]

# Feature for building the RP2040 binary with defmt-rtt (default)
embassy-rp = [
    "dep:embassy-sync",
    "dep:embassy-executor",
    "dep:embassy-time",
    "dep:embassy-futures",
    "dep:embassy-rp",
    "dep:embassy-net",
    "dep:cyw43",
    "dep:cyw43-pio",
    "dep:panic-persist",
    "dep:defmt",
    "dep:defmt-rtt",
    "dep:cortex-m-rt",
    "dep:static_cell",
    "dep:critical-section",
    "heapless/defmt",
]

# Feature for building the RP2040 binary with USB logger
# Note: defmt-rtt is still needed because dependencies (cyw43, embassy-rp) use defmt internally
embassy-rp-usb = [
    "dep:embassy-sync",
    "dep:embassy-executor",
    "dep:embassy-time",
    "dep:embassy-futures",
    "dep:embassy-rp",
    "dep:embassy-net",
    "dep:cyw43",
    "dep:cyw43-pio",
    "dep:panic-persist",
    "dep:defmt",
    "dep:defmt-rtt",
    "dep:cortex-m-rt",
    "dep:static_cell",
    "dep:critical-section",
    "usb-logger",
    "heapless/defmt",
]


[profile.release]
# Optimize for size instead of speed (z = aggressive size optimization)
opt-level = "z"
# Enable full Link-Time Optimization for maximum size reduction
lto = "fat"
# Single codegen unit for better optimization (slower compile, smaller binary)
codegen-units = 1
# Strip symbols from binary
strip = true
# No debug info in release (saves ~2-3 MB)
debug = false
# Panic = abort for smaller binary and faster unwinding
panic = "abort"
# Disable overflow checks for smaller size (use with caution!)
overflow-checks = false

[profile.dev]
# Even in debug, optimize a bit for usable performance
opt-level = 1

[lints.rust]
# Compiler lints for code quality
ambiguous_negative_literals = "warn"
missing_debug_implementations = "warn"
redundant_imports = "warn"
redundant_lifetimes = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_lifetimes = "warn"

[lints.clippy]
# Enable all major lint categories
cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

# Restriction lints for consistency and quality
allow_attributes_without_reason = "warn"
as_pointer_underscore = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
fn_to_numeric_cast_any = "warn"
if_then_some_else_none = "warn"
map_err_ignore = "warn"
redundant_type_annotations = "warn"
renamed_function_params = "warn"
semicolon_outside_block = "warn"
string_to_string = "warn"
undocumented_unsafe_blocks = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unneeded_field_pattern = "warn"
unused_result_ok = "warn"

# Custom opt-outs for embedded/no_std context
missing_errors_doc = "allow"          # Many embedded functions don't need error docs
missing_panics_doc = "allow"          # Panics are rare and documented where needed
module_name_repetitions = "allow"     # Common pattern in protocol code
must_use_candidate = "allow"          # Too noisy for builder patterns
cast_possible_truncation = "allow"    # Common in protocol parsing, checked manually
cast_sign_loss = "allow"              # Common in protocol parsing, checked manually
cast_possible_wrap = "allow"          # Common in protocol parsing, checked manually
similar_names = "allow"               # Protocol fields have similar names by design
too_many_lines = "allow"              # Some protocol parsers are legitimately long
struct_excessive_bools = "allow"      # Control fields have multiple bools by design
inline_always = "allow"               # Hot-path optimizations for embedded performance
cast_precision_loss = "allow"         # DPT conversion math requires precision trade-offs

[package.metadata.embassy]
build = [
  { target = "thumbv8m.main-none-eabihf" }
]
